drones = serializers.HyperlinkedRelatedField(         many=True,         read_only=True,         view_name='drone-detail') 
drone_category = serializers.SlugRelatedField(queryset=DroneCategory.objects.all(), slug_field='name') 
fields = (             'url',             'name',             'drone_category',             'manufacturing_date',             'has_it_competed',             'inserted_timestamp')


http POST :8000/competitions/ distance_in_feet=800 distance_achievement_date="2017-10-20T05:03:20.776594Z" pilot="Penelope Pitstop" drone="Atom"


Queries

from django.db.models.functions import Coalesce
from django.db.models import Sum
Terrain.objects.annotate(heures=Sum('reservations__duration'))
print("Terrain {} a été réservé en {}h.".format(terrain.matricule, terrain.heures))

res= Terrain.objects.annotate(heures=Coalesce(Sum('reservations__duration'), 0))


def available_membres(reservation):
   if reservation.membre1 !=None: yield reservation.membre1
   if reservation.membre3 !=None: yield reservation.membre3
   if reservation.membre2 !=None: yield reservation.membre2
   if reservation.membre4 !=None: yield reservation.membre4
   

for res in Reservation.objects.all():
   res.players.add(*list(available_membres(res)))
   
   
for res in Reservation.objects.all():
  print(round((res.end_date-res.start_date).seconds/3600))
  
  from core.models import *
  from django.db.models import Value, When, Case
  Reservation.objects.update(type_match=Case(When(entrainement=True, then=Value("E")), default=Value("M")))
  
  
  *** Migrate
    python3 manage.py migrate --fake core zero

   find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
   find . -path "*/migrations/*.pyc"  -delete
  python3 manage.py migrate --fake-initial --database=mongo
  
  python3 manage.py dumpdata --database=default --exclude contenttypes > data.json
  python3 manage.py loaddata --database=mongo data.json

  
  
  
   {
    user: "gxAdmin",
    pwd: "mgadtech@_@",
    roles: [ { role: "userAdminAnyDatabase", db: "admin" }, "readWriteAnyDatabase" ]
  }
)

mongo --authenticationDatabase "admin" -u gxAdmin -p




membres = Membre.objects.distinct().annotate(montant_cotisation=F('cotisation__montant'),cotisation_montant_payé=F('cotisation__montant_paye'),).distinct().values('id', 'nom', 'sexe', 'mail', 'tel','age', 'date_naissance','tournoi', 'licence_fideration', 'cotisation__type', 'cotisation__paye','montant_cotisation', 'cotisation_montant_payé')
